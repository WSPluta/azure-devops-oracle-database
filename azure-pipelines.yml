# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ba554595-2da8-4cf6-88c4-a57c75966491'
  imageRepository: 'multicloudapp'
  containerRegistry: 'multicloud.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'multicloud2012b828-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - upload: manifests
            artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
        displayName: Deploy
        pool:
          vmImage: $(vmImageName)
        environment: 'paulparkinsonazuredevopsoracledatabase-8684.default'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                      
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)



      - deployment: DeployPullRequest
        displayName: Deploy Pull request
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
        pool:
          vmImage: $(vmImageName)

        environment: 'paulparkinsonazuredevopsoracledatabase-8684.$(k8sNamespaceForPR)'
        strategy:
          runOnce:
            deploy:
              steps:
                - reviewApp: default

                - task: Kubernetes@1
                  displayName: 'Create a new namespace for the pull request'
                  inputs:
                    command: apply
                    useConfigurationFile: true
                    inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    namespace: $(k8sNamespaceForPR)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                - task: KubernetesManifest@0
                  displayName: Deploy to the new namespace in the Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: $(k8sNamespaceForPR)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)

                - script: |
                    echo "This is a bash script test."
                    displayName: 'Run Bash Script test'

                - script: |
                    kubectl patch deployment multicloudapp --type='json' -p='[
                      {"op": "add", "path": "/spec/template/spec/containers/0/env", "value": [{"name": "AZURE_LOG_LEVEL", "value": "verbose"}, {"name": "AZURE_CLIENT_ID0", "value": "$(AZURE_CLIENT_ID)"}, {"name": "AZURE_CLIENT_ID", "value": "72c76835-1917-4fbc-921a-e688d7f4dcf2"}, {"name": "AZURE_CLIENT_SECRET", "value": "72c76835-1917-4fbc-921a-e688d7f4dcf2"}, {"name": "AZURE_TENANT_ID", "value": "5b743bc7-c1e2-4d46-b4b5-a32eddac0286"}]}
                    ]' --namespace default

                - task: Kubernetes@1
                  name: get
                  displayName: 'Get services in the new namespace'
                  continueOnError: true
                  inputs:
                    command: get
                    namespace: $(k8sNamespaceForPR)
                    arguments: svc
                    outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

                # Getting the IP of the deployed service and writing it to a variable for posing comment
                - script: |
                    url="$(get.KubectlOutput)"
                    message="Your review app has been deployed"
                    if [ ! -z "$url" -a "$url" != "http://:" ]
                    then
                      message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
                    fi
                    echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"

